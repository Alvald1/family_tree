// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –ø–µ—Ä—Å–æ–Ω—ã —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞
class PersonPhotos {
    constructor() {
        this.photos = [];
        this.sortMode = false;
        this.draggedIndex = null;
        this.init();
    }

    init() {
        this.bindEvents();
        this.setupDragAndDrop();
        this.setupSortMode();
    }

    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
     */
    bindEvents() {
        // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ
        const addBtn = document.getElementById('addPhotoBtn');
        if (addBtn) {
            addBtn.addEventListener('click', () => {
                this.addPhotoSimple();
            });
        }
    }

    /**
     * –ü—Ä–æ—Å—Ç–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ input file
     */
    addPhotoSimple() {
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π input –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
        const input = document.createElement('input');
        input.type = 'file';
        input.accept = 'image/*';
        input.multiple = true;

        input.addEventListener('change', (e) => {
            const files = Array.from(e.target.files);
            if (files.length > 0) {
                this.uploadPhotos(files);
            }
        });

        input.click();
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
     */
    async uploadPhotos(files) {
        try {
            const personId = getPersonIdFromUrl();

            for (const file of files) {
                if (!file.type.startsWith('image/')) {
                    console.warn('–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª, –Ω–µ —è–≤–ª—è—é—â–∏–π—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º:', file.name);
                    continue;
                }

                const formData = new FormData();
                formData.append('photo', file);

                const response = await fetch(`/api/person/${personId}/photos`, {
                    method: 'POST',
                    body: formData
                });

                if (!response.ok) {
                    throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${file.name}`);
                }

                const result = await response.json();
                if (result.success && result.photo) {
                    this.photos.unshift(result.photo);
                }
            }

            this.renderPhotos();

            if (window.showSuccess) {
                showSuccess(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: ${files.length}`);
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:', error);
            if (window.showError) {
                showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π');
            }
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ drag & drop –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
     */
    setupDragAndDrop() {
        const photosGrid = document.getElementById('photosGrid');
        if (!photosGrid) return;

        // –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞–∫ –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏—Ö —É–¥–∞–ª–µ–Ω–∏—è
        this.handleDragEnter = (e) => {
            if (this.sortMode) return;
            this.preventDefaults(e);
            photosGrid.classList.add('drag-over');
        };

        this.handleDragOver = (e) => {
            if (this.sortMode) return;
            this.preventDefaults(e);
        };

        this.handleDragLeave = (e) => {
            if (this.sortMode) return;
            this.preventDefaults(e);
            photosGrid.classList.remove('drag-over');
        };

        this.handleDrop = (e) => {
            if (this.sortMode) return;
            this.preventDefaults(e);
            photosGrid.classList.remove('drag-over');

            const files = Array.from(e.dataTransfer.files);
            const imageFiles = files.filter(file => file.type.startsWith('image/'));

            if (imageFiles.length > 0) {
                this.uploadPhotos(imageFiles);
            }
        };

        // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ–º drag-and-drop
        this.enableDragAndDrop();
    }

    preventDefaults(e) {
        e.preventDefault();
        e.stopPropagation();
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∂–∏–º–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
     */
    setupSortMode() {
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        const photosHeader = document.querySelector('.photos-header');
        if (photosHeader) {
            const sortToggle = document.createElement('button');
            sortToggle.className = 'sort-mode-toggle';
            sortToggle.id = 'sortModeToggle';
            sortToggle.innerHTML = 'üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫';
            sortToggle.title = '–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π';

            sortToggle.addEventListener('click', () => {
                this.toggleSortMode();
            });

            photosHeader.appendChild(sortToggle);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        const photosContainer = document.querySelector('.photos-container');
        if (photosContainer) {
            const instructions = document.createElement('div');
            instructions.className = 'sort-instructions';
            instructions.id = 'sortInstructions';
            instructions.innerHTML = `
                <span class="icon">üëÜ</span>
                –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Ö –ø–æ—Ä—è–¥–∫–∞. –ù–∞–∂–º–∏—Ç–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫" –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.
            `;

            photosContainer.insertBefore(instructions, photosContainer.querySelector('.photos-grid'));
        }
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
     */
    toggleSortMode() {
        this.sortMode = !this.sortMode;
        const grid = document.getElementById('photosGrid');
        const toggle = document.getElementById('sortModeToggle');
        const instructions = document.getElementById('sortInstructions');

        if (this.sortMode) {
            grid?.classList.add('sortable');
            toggle?.classList.add('active');
            toggle.innerHTML = 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫';
            instructions?.classList.add('visible');
            // –û—Ç–∫–ª—é—á–∞–µ–º drag-and-drop –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
            this.disableDragAndDrop();
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            this.renderPhotos();
        } else {
            grid?.classList.remove('sortable');
            toggle?.classList.remove('active');
            toggle.innerHTML = 'üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫';
            instructions?.classList.remove('visible');
            // –û—á–∏—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            this.clearPhotoSorting();
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            if (this.photos.length > 0) {
                this.savePhotoOrder();
            }
            // –í–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ drag-and-drop –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
            this.enableDragAndDrop();
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            this.renderPhotos();
        }
    }

    /**
     * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ drag-and-drop –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
     */
    disableDragAndDrop() {
        const photosGrid = document.getElementById('photosGrid');
        if (!photosGrid) return;

        photosGrid.removeEventListener('dragenter', this.handleDragEnter, false);
        photosGrid.removeEventListener('dragover', this.handleDragOver, false);
        photosGrid.removeEventListener('dragleave', this.handleDragLeave, false);
        photosGrid.removeEventListener('drop', this.handleDrop, false);

        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å drag-and-drop
        photosGrid.classList.remove('drag-over');
    }

    /**
     * –í–∫–ª—é—á–µ–Ω–∏–µ drag-and-drop –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
     */
    enableDragAndDrop() {
        const photosGrid = document.getElementById('photosGrid');
        if (!photosGrid) return;

        photosGrid.addEventListener('dragenter', this.handleDragEnter, false);
        photosGrid.addEventListener('dragover', this.handleDragOver, false);
        photosGrid.addEventListener('dragleave', this.handleDragLeave, false);
        photosGrid.addEventListener('drop', this.handleDrop, false);
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
     */
    setupPhotoSorting() {
        const grid = document.getElementById('photosGrid');
        if (!grid) return;

        grid.querySelectorAll('.photo-item').forEach((item, index) => {
            item.draggable = true;
            item.dataset.originalIndex = index;

            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            item.removeEventListener('dragstart', item._dragStartHandler);
            item.removeEventListener('dragend', item._dragEndHandler);
            item.removeEventListener('dragover', item._dragOverHandler);
            item.removeEventListener('dragenter', item._dragEnterHandler);
            item.removeEventListener('dragleave', item._dragLeaveHandler);
            item.removeEventListener('drop', item._dropHandler);

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            item._dragStartHandler = (e) => {
                this.draggedIndex = parseInt(e.target.closest('.photo-item').dataset.index);
                e.target.closest('.photo-item').classList.add('dragging');
                e.dataTransfer.effectAllowed = 'move';
                e.dataTransfer.setData('text/html', e.target.outerHTML);
            };

            item._dragEndHandler = (e) => {
                e.target.closest('.photo-item').classList.remove('dragging');
                grid.querySelectorAll('.photo-item').forEach(i => {
                    i.classList.remove('drag-over');
                });
            };

            item._dragOverHandler = (e) => {
                e.preventDefault();
                e.stopPropagation();
                e.dataTransfer.dropEffect = 'move';
            };

            item._dragEnterHandler = (e) => {
                e.preventDefault();
                e.stopPropagation();
                const photoItem = e.target.closest('.photo-item');
                if (photoItem && photoItem !== document.querySelector('.photo-item.dragging')) {
                    photoItem.classList.add('drag-over');
                }
            };

            item._dragLeaveHandler = (e) => {
                const photoItem = e.target.closest('.photo-item');
                if (photoItem && !photoItem.contains(e.relatedTarget)) {
                    photoItem.classList.remove('drag-over');
                }
            };

            item._dropHandler = (e) => {
                e.preventDefault();
                e.stopPropagation();

                const photoItem = e.target.closest('.photo-item');
                if (photoItem) {
                    photoItem.classList.remove('drag-over');

                    const dropIndex = parseInt(photoItem.dataset.index);
                    if (this.draggedIndex !== null && this.draggedIndex !== dropIndex) {
                        this.movePhoto(this.draggedIndex, dropIndex);
                    }
                }
                this.draggedIndex = null;
            };

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            item.addEventListener('dragstart', item._dragStartHandler);
            item.addEventListener('dragend', item._dragEndHandler);
            item.addEventListener('dragover', item._dragOverHandler);
            item.addEventListener('dragenter', item._dragEnterHandler);
            item.addEventListener('dragleave', item._dragLeaveHandler);
            item.addEventListener('drop', item._dropHandler);
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ drag-and-drop)
     */
    handleFiles(files) {
        const imageFiles = Array.from(files).filter(file => file.type.startsWith('image/'));
        if (imageFiles.length > 0) {
            this.uploadPhotos(imageFiles);
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
     */
    clearPhotoSorting() {
        const grid = document.getElementById('photosGrid');
        if (!grid) return;

        grid.querySelectorAll('.photo-item').forEach(item => {
            item.draggable = false;
            item.removeEventListener('dragstart', item._dragStartHandler);
            item.removeEventListener('dragend', item._dragEndHandler);
            item.removeEventListener('dragover', item._dragOverHandler);
            item.removeEventListener('dragenter', item._dragEnterHandler);
            item.removeEventListener('dragleave', item._dragLeaveHandler);
            item.removeEventListener('drop', item._dropHandler);

            // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ–º
            item.classList.remove('dragging', 'drag-over');
        });
    }

    /**
     * –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –º–∞—Å—Å–∏–≤–µ
     */
    movePhoto(fromIndex, toIndex) {
        if (fromIndex === toIndex) return;

        const photo = this.photos.splice(fromIndex, 1)[0];
        this.photos.splice(toIndex, 0, photo);

        this.renderPhotos();
        if (this.sortMode) {
            this.setupPhotoSorting();
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
     */
    async savePhotoOrder() {
        try {
            const personId = getPersonIdFromUrl();
            // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Å –Ω–æ–≤—ã–º –ø–æ—Ä—è–¥–∫–æ–º - –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ç 0 –¥–æ –¥–ª–∏–Ω—ã –º–∞—Å—Å–∏–≤–∞
            // —Ç–∞–∫ –∫–∞–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É–∂–µ –ø–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–µ–Ω—ã –≤ this.photos
            const order = Array.from({ length: this.photos.length }, (_, i) => i);

            const response = await fetch(`/api/person/${personId}/photos/reorder`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ order, photos: this.photos })
            });

            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π');
            }

            const result = await response.json();
            if (result.success) {
                this.photos = result.photos;
                if (window.showSuccess) {
                    showSuccess('–ü–æ—Ä—è–¥–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
                }
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:', error);
            if (window.showError) {
                showError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π');
            }
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞
     */
    async loadPhotos(personId) {
        try {
            const photosGrid = document.getElementById('photosGrid');
            if (!photosGrid) return;

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            photosGrid.innerHTML = `
                <div class="loading">
                    <div class="spinner"></div>
                    <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π...</p>
                </div>
            `;

            const response = await fetch(`/api/person/${personId}/photos`);
            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π');
            }

            this.photos = await response.json();
            this.renderPhotos();

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:', error);
            const photosGrid = document.getElementById('photosGrid');
            if (photosGrid) {
                photosGrid.innerHTML = `
                    <div class="error-message">
                        <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π</h3>
                        <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.</p>
                        <button onclick="window.location.reload()" class="btn">–û–±–Ω–æ–≤–∏—Ç—å</button>
                    </div>
                `;
            }
        }
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
     */
    renderPhotos() {
        const container = document.getElementById('photosGrid');
        if (!container) return;

        if (this.photos.length === 0) {
            this.showEmptyState();
            return;
        }

        const photosHTML = this.photos.map((photo, index) =>
            this.createPhotoHTML(photo, index)
        ).join('');

        container.innerHTML = photosHTML;
        this.bindPhotoEvents();

        // –ï—Å–ª–∏ —Ä–µ–∂–∏–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤–∫–ª—é—á–µ–Ω, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
        if (this.sortMode) {
            this.setupPhotoSorting();
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ HTML –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
     */
    createPhotoHTML(photo, index) {
        const sortHandle = this.sortMode ?
            `<button class="btn btn-sm photo-action-btn photo-sort-handle" title="–ü–µ—Ä–µ—Ç–∞—â–∏—Ç—å">‚ö´</button>` : '';

        return `
            <div class="photo-item" data-index="${index}">
                <div class="photo-wrapper">
                    <img class="photo-image" src="${photo.url}" alt="${this.escapeHtml(photo.caption || '–§–æ—Ç–æ')}" 
                         loading="lazy" onclick="window.personPhotos.viewPhoto(${index})">
                    <div class="photo-overlay">
                        <div class="photo-actions">
                            ${sortHandle}
                            <button class="btn btn-sm photo-action-btn photo-view" data-index="${index}" title="–ü—Ä–æ—Å–º–æ—Ç—Ä">üëÅ</button>
                            <button class="btn btn-sm photo-action-btn btn-danger photo-delete" data-index="${index}" title="–£–¥–∞–ª–∏—Ç—å">‚úï</button>
                        </div>
                    </div>
                </div>
                <div class="photo-info">
                    ${photo.caption ? `<p class="photo-caption">${this.escapeHtml(photo.caption)}</p>` : ''}
                    ${photo.date ? `<span class="photo-date">${new Date(photo.date).toLocaleDateString('ru-RU')}</span>` : ''}
                </div>
            </div>
        `;
    }

    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º
     */
    bindPhotoEvents() {
        const container = document.getElementById('photosGrid');
        if (!container) return;

        // –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–æ—Ç–æ
        container.querySelectorAll('.photo-view').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.stopPropagation();
                const index = parseInt(e.target.dataset.index);
                this.viewPhoto(index);
            });
        });

        // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ
        container.querySelectorAll('.photo-delete').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.stopPropagation();
                const index = parseInt(e.target.dataset.index);
                this.deletePhoto(index);
            });
        });
    }

    /**
     * –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ
     */
    viewPhoto(index) {
        if (this.photos[index]) {
            window.open(this.photos[index].url, '_blank');
        }
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
     */
    async deletePhoto(index) {
        if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é?')) {
            return;
        }

        try {
            const personId = getPersonIdFromUrl();
            const response = await fetch(`/api/person/${personId}/photos/${index}`, {
                method: 'DELETE'
            });

            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏');
            }

            this.photos.splice(index, 1);
            this.renderPhotos();

            if (window.showSuccess) {
                showSuccess('–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É–¥–∞–ª–µ–Ω–∞');
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:', error);
            if (window.showError) {
                showError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏');
            }
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
     */
    showEmptyState() {
        const container = document.getElementById('photosGrid');
        if (!container) return;

        let content;
        if (this.sortMode) {
            content = `
                <div class="empty-state">
                    <div class="empty-icon">üì∑</div>
                    <h3>–ù–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏</h3>
                    <p>–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∏—Ö –ø–æ—Ä—è–¥–æ–∫</p>
                </div>
            `;
        } else {
            content = `
                <div class="empty-state">
                    <div class="empty-icon">üì∑</div>
                    <h3>–ù–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π</h3>
                    <p>–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª—ã —Å—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ"</p>
                </div>
            `;
        }

        container.innerHTML = content;
    }

    /**
     * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
     */
    escapeHtml(unsafe) {
        return unsafe
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.PersonPhotos = PersonPhotos;
