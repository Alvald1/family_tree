// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –ø–µ—Ä—Å–æ–Ω—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω)
class PersonPhotos {
    constructor() {
        this.photos = [];
        this.init();
    }

    init() {
        this.bindEvents();
        this.setupDragAndDrop();
    }

    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
     */
    bindEvents() {
        // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ
        const addBtn = document.getElementById('addPhotoBtn');
        if (addBtn) {
            addBtn.addEventListener('click', () => {
                this.addPhotoSimple();
            });
        }
    }

    /**
     * –ü—Ä–æ—Å—Ç–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ input file
     */
    addPhotoSimple() {
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π input –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
        const input = document.createElement('input');
        input.type = 'file';
        input.accept = 'image/*';
        input.multiple = true;

        input.addEventListener('change', (e) => {
            const files = Array.from(e.target.files);
            if (files.length > 0) {
                this.uploadPhotos(files);
            }
        });

        input.click();
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
     */
    async uploadPhotos(files) {
        try {
            const personId = getPersonIdFromUrl();

            for (const file of files) {
                if (!file.type.startsWith('image/')) {
                    console.warn('–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª, –Ω–µ —è–≤–ª—è—é—â–∏–π—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º:', file.name);
                    continue;
                }

                const formData = new FormData();
                formData.append('photo', file);

                const response = await fetch(`/api/person/${personId}/photos`, {
                    method: 'POST',
                    body: formData
                });

                if (!response.ok) {
                    throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${file.name}`);
                }

                const result = await response.json();
                if (result.success && result.photo) {
                    this.photos.unshift(result.photo);
                }
            }

            this.renderPhotos();

            if (window.showSuccess) {
                showSuccess(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: ${files.length}`);
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:', error);
            if (window.showError) {
                showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π');
            }
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ drag & drop
     */
    setupDragAndDrop() {
        const photosGrid = document.getElementById('photosGrid');
        if (!photosGrid) return;

        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            photosGrid.addEventListener(eventName, this.preventDefaults, false);
        });

        ['dragenter', 'dragover'].forEach(eventName => {
            photosGrid.addEventListener(eventName, () => {
                photosGrid.classList.add('drag-over');
            }, false);
        });

        ['dragleave', 'drop'].forEach(eventName => {
            photosGrid.addEventListener(eventName, () => {
                photosGrid.classList.remove('drag-over');
            }, false);
        });

        photosGrid.addEventListener('drop', (e) => {
            const files = Array.from(e.dataTransfer.files);
            const imageFiles = files.filter(file => file.type.startsWith('image/'));

            if (imageFiles.length > 0) {
                this.uploadPhotos(imageFiles);
            }
        }, false);
    }

    preventDefaults(e) {
        e.preventDefault();
        e.stopPropagation();
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞
     */
    async loadPhotos(personId) {
        try {
            const photosGrid = document.getElementById('photosGrid');
            if (!photosGrid) return;

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            photosGrid.innerHTML = `
                <div class="loading">
                    <div class="spinner"></div>
                    <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π...</p>
                </div>
            `;

            const response = await fetch(`/api/person/${personId}/photos`);
            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π');
            }

            this.photos = await response.json();
            this.renderPhotos();

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:', error);
            const photosGrid = document.getElementById('photosGrid');
            if (photosGrid) {
                photosGrid.innerHTML = `
                    <div class="error-message">
                        <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π</h3>
                        <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.</p>
                        <button onclick="window.location.reload()" class="btn">–û–±–Ω–æ–≤–∏—Ç—å</button>
                    </div>
                `;
            }
        }
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
     */
    renderPhotos() {
        const container = document.getElementById('photosGrid');
        if (!container) return;

        if (this.photos.length === 0) {
            this.showEmptyState();
            return;
        }

        const photosHTML = this.photos.map((photo, index) =>
            this.createPhotoHTML(photo, index)
        ).join('');

        container.innerHTML = photosHTML;
        this.bindPhotoEvents();
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ HTML –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
     */
    createPhotoHTML(photo, index) {
        return `
            <div class="photo-item" data-index="${index}">
                <div class="photo-wrapper">
                    <img class="photo-image" src="${photo.url}" alt="${this.escapeHtml(photo.caption || '–§–æ—Ç–æ')}" 
                         loading="lazy" onclick="window.personPhotos.viewPhoto(${index})">
                    <div class="photo-overlay">
                        <div class="photo-actions">
                            <button class="btn btn-sm photo-view" data-index="${index}" title="–ü—Ä–æ—Å–º–æ—Ç—Ä">üëÅÔ∏è</button>
                            <button class="btn btn-sm btn-danger photo-delete" data-index="${index}" title="–£–¥–∞–ª–∏—Ç—å">üóëÔ∏è</button>
                        </div>
                    </div>
                </div>
                <div class="photo-info">
                    ${photo.caption ? `<p class="photo-caption">${this.escapeHtml(photo.caption)}</p>` : ''}
                    ${photo.date ? `<span class="photo-date">${new Date(photo.date).toLocaleDateString('ru-RU')}</span>` : ''}
                </div>
            </div>
        `;
    }

    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º
     */
    bindPhotoEvents() {
        const container = document.getElementById('photosGrid');
        if (!container) return;

        // –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–æ—Ç–æ
        container.querySelectorAll('.photo-view').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.stopPropagation();
                const index = parseInt(e.target.dataset.index);
                this.viewPhoto(index);
            });
        });

        // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ
        container.querySelectorAll('.photo-delete').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.stopPropagation();
                const index = parseInt(e.target.dataset.index);
                this.deletePhoto(index);
            });
        });
    }

    /**
     * –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ
     */
    viewPhoto(index) {
        if (this.photos[index]) {
            window.open(this.photos[index].url, '_blank');
        }
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
     */
    async deletePhoto(index) {
        if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é?')) {
            return;
        }

        try {
            const personId = getPersonIdFromUrl();
            const response = await fetch(`/api/person/${personId}/photos/${index}`, {
                method: 'DELETE'
            });

            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏');
            }

            this.photos.splice(index, 1);
            this.renderPhotos();

            if (window.showSuccess) {
                showSuccess('–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É–¥–∞–ª–µ–Ω–∞');
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:', error);
            if (window.showError) {
                showError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏');
            }
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
     */
    showEmptyState() {
        const container = document.getElementById('photosGrid');
        if (!container) return;

        container.innerHTML = `
            <div class="empty-state">
                <div class="empty-icon">üì∑</div>
                <h3>–ù–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π</h3>
                <p>–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª—ã —Å—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ"</p>
            </div>
        `;
    }

    /**
     * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
     */
    escapeHtml(unsafe) {
        return unsafe
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.PersonPhotos = PersonPhotos;
