// –ü—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫ —Å–µ–º–µ–π–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞
class TreeViewer {
    constructor(containerId) {
        this.container = document.getElementById(containerId);
        this.svg = null;
        this.currentZoom = AppConfig.viewer.defaultZoom;
        this.translateX = 0;
        this.translateY = 0;
        this.viewState = null;

        if (!this.container) {
            throw new Error(`Container with ID "${containerId}" not found`);
        }

        this.init();
    }

    init() {
        this.setupEventListeners();
        this.loadSVG();
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ SVG —Ñ–∞–π–ª–∞
     */
    async loadSVG() {
        try {
            this.showLoading();

            const response = await Utils.fetchWithCache(AppConfig.files.familyTreeSvg);
            const svgText = await response.text();

            this.container.innerHTML = svgText;
            this.svg = this.container.querySelector('svg');

            if (this.svg) {
                this.setupSVG();
                this.restoreViewState();
                notifications.success(AppConfig.messages.loadSuccess);
            } else {
                throw new Error('SVG element not found in loaded content');
            }

        } catch (error) {
            console.error('SVG loading error:', error);
            this.showError(error);
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SVG —ç–ª–µ–º–µ–Ω—Ç–∞
     */
    setupSVG() {
        this.svg.setAttribute('width', '100%');
        this.svg.setAttribute('height', 'auto');
        this.svg.style.display = 'block';
        this.svg.style.transformOrigin = 'center center';

        this.addPersonClickHandlers();
        this.updateTransform();
    }

    /**
     * –ü–æ–∫–∞–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
     */
    showLoading() {
        this.container.innerHTML = `
            <div class="loading">
                <div class="spinner"></div>
                <p>${AppConfig.messages.loading}</p>
            </div>
        `;
    }

    /**
     * –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
     */
    showError(error) {
        const errorDetails = error.message.includes('404') ?
            AppConfig.messages.fileNotFound :
            AppConfig.messages.networkError;

        this.container.innerHTML = `
            <div class="error-message">
                <h3>${AppConfig.icons.error} ${AppConfig.messages.loadError}</h3>
                <p><strong>${errorDetails}</strong></p>
                <p>–í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:</p>
                <ul style="text-align: left; display: inline-block;">
                    <li>–ó–∞–ø—É—Å—Ç–∏—Ç–µ <code>python3 main.py</code> –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ä–µ–≤–∞</li>
                    <li>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª source.txt —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ</li>
                    <li>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Graphviz</li>
                </ul>
                <button onclick="location.reload()" class="btn">
                    üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
                </button>
            </div>
        `;
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–ª–∏–∫–æ–≤ –Ω–∞ –ø–µ—Ä—Å–æ–Ω
     */
    addPersonClickHandlers() {
        const personNodes = this.svg.querySelectorAll('g.node:not([id*="marriage"])');

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –≤–º–µ—Å—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–∑–ª–∞
        this.svg.addEventListener('mouseenter', this.handleNodeMouseEnter.bind(this), true);
        this.svg.addEventListener('mouseleave', this.handleNodeMouseLeave.bind(this), true);
        this.svg.addEventListener('dblclick', this.handleNodeDoubleClick.bind(this));

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∏–ª–∏ –∏ —Ç—É–ª—Ç–∏–ø—ã –¥–ª—è —É–∑–ª–æ–≤
        personNodes.forEach(node => {
            const nodeId = node.getAttribute('id');
            if (nodeId && !nodeId.includes('marriage')) {
                this.setupPersonNodeStyles(node, nodeId);
            }
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –º—ã—à–∏ –≤ —É–∑–µ–ª
     */
    handleNodeMouseEnter(e) {
        const node = e.target.closest('g.node:not([id*="marriage"])');
        if (node && node.getAttribute('id') && !node.getAttribute('id').includes('marriage')) {
            node.style.filter = 'drop-shadow(0 0 10px rgba(102, 126, 234, 0.6))';
            this.addNodeHighlight(node);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ –º—ã—à–∏ –∏–∑ —É–∑–ª–∞
     */
    handleNodeMouseLeave(e) {
        const node = e.target.closest('g.node:not([id*="marriage"])');
        if (node && node.getAttribute('id') && !node.getAttribute('id').includes('marriage')) {
            node.style.filter = 'none';
            this.removeNodeHighlight(node);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞
     */
    handleNodeDoubleClick(e) {
        const node = e.target.closest('g.node:not([id*="marriage"])');
        if (node && node.getAttribute('id') && !node.getAttribute('id').includes('marriage')) {
            e.preventDefault();
            e.stopPropagation();
            const nodeId = node.getAttribute('id');
            this.openPersonPage(nodeId);
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π —É–∑–ª–∞ –ø–µ—Ä—Å–æ–Ω—ã
     */
    setupPersonNodeStyles(node, nodeId) {
        // –°—Ç–∏–ª–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        node.style.cursor = 'pointer';
        node.style.transition = 'all 0.3s ease';

        // –¢—É–ª—Ç–∏–ø
        this.addTooltip(node);
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —É–∑–ª–∞
     */
    addNodeHighlight(node) {
        const textElements = node.querySelectorAll('text');
        const shapeElements = node.querySelectorAll('polygon, ellipse, rect');

        textElements.forEach(text => {
            text.style.fontWeight = 'bold';
        });

        shapeElements.forEach(shape => {
            shape.style.strokeWidth = '3';
        });
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —É–∑–ª–∞
     */
    removeNodeHighlight(node) {
        const textElements = node.querySelectorAll('text');
        const shapeElements = node.querySelectorAll('polygon, ellipse, rect');

        textElements.forEach(text => {
            text.style.fontWeight = '';
        });

        shapeElements.forEach(shape => {
            shape.style.strokeWidth = '';
        });
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—É–ª—Ç–∏–ø–∞ –∫ —É–∑–ª—É
     */
    addTooltip(node) {
        const title = document.createElementNS('http://www.w3.org/2000/svg', 'title');
        title.textContent = AppConfig.messages.personClickHint;
        node.appendChild(title);
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–µ—Ä—Å–æ–Ω—ã
     */
    openPersonPage(personId) {
        this.saveViewState();
        notifications.info(AppConfig.messages.personPageOpening);
        window.location.href = `person.html?id=${personId}`;
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
     */
    saveViewState() {
        if (!AppConfig.autoSave.enabled) return;

        const viewState = {
            zoom: this.currentZoom,
            translateX: this.translateX,
            translateY: this.translateY,
            timestamp: Date.now()
        };

        Utils.saveToLocalStorage(AppConfig.autoSave.localStorageKey, viewState);
    }

    /**
     * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
     */
    restoreViewState() {
        if (!AppConfig.autoSave.enabled) return false;

        const savedState = Utils.loadFromLocalStorage(AppConfig.autoSave.localStorageKey);

        if (savedState && Utils.isTimestampValid(savedState.timestamp, AppConfig.viewer.stateExpirationTime)) {
            this.currentZoom = savedState.zoom || AppConfig.viewer.defaultZoom;
            this.translateX = savedState.translateX || 0;
            this.translateY = savedState.translateY || 0;
            this.updateTransform();
            notifications.info(AppConfig.messages.stateRestored);
            return true;
        }

        return false;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ SVG
     */
    updateTransform() {
        if (!this.svg) return;

        this.svg.style.transform = `translate(${this.translateX}px, ${this.translateY}px) scale(${this.currentZoom})`;

        // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å –¥–µ–±–∞—É–Ω—Å–æ–º
        if (AppConfig.autoSave.enabled) {
            clearTimeout(this.saveTimeout);
            this.saveTimeout = setTimeout(() => {
                this.saveViewState();
            }, AppConfig.autoSave.debounceTime);
        }
    }

    /**
     * –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
     */
    zoom(delta, centerX, centerY) {
        const newZoom = Utils.clamp(
            this.currentZoom * delta,
            AppConfig.viewer.minZoom,
            AppConfig.viewer.maxZoom
        );

        if (centerX !== undefined && centerY !== undefined) {
            // –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–æ—á–∫–∏
            const rect = this.container.getBoundingClientRect();
            const containerPadding = 20;
            const mouseX = centerX - rect.left - containerPadding;
            const mouseY = centerY - rect.top - containerPadding;

            const pointBeforeX = (mouseX - this.translateX) / this.currentZoom;
            const pointBeforeY = (mouseY - this.translateY) / this.currentZoom;

            this.currentZoom = newZoom;
            this.translateX = mouseX - pointBeforeX * this.currentZoom;
            this.translateY = mouseY - pointBeforeY * this.currentZoom;
        } else {
            this.currentZoom = newZoom;
        }

        this.updateTransform();
    }

    /**
     * –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
     */
    translate(deltaX, deltaY) {
        this.translateX += deltaX;
        this.translateY += deltaY;
        this.updateTransform();
    }

    /**
     * –°–±—Ä–æ—Å –≤–∏–¥–∞ –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
     */
    resetView() {
        this.currentZoom = AppConfig.viewer.defaultZoom;
        this.translateX = 0;
        this.translateY = 0;
        this.updateTransform();
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ tree-interactions.js
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
     */
    getViewState() {
        return {
            zoom: this.currentZoom,
            translateX: this.translateX,
            translateY: this.translateY
        };
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
     */
    setViewState(state) {
        this.currentZoom = Utils.clamp(state.zoom || AppConfig.viewer.defaultZoom, AppConfig.viewer.minZoom, AppConfig.viewer.maxZoom);
        this.translateX = state.translateX || 0;
        this.translateY = state.translateY || 0;
        this.updateTransform();
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = TreeViewer;
}
