// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –ø–µ—Ä—Å–æ–Ω—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω)
class PersonMessages {
    constructor() {
        this.messages = [];
        this.editingMessageId = null;
        this.init();
    }

    init() {
        this.bindEvents();
    }

    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
     */
    bindEvents() {
        // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        const addBtn = document.getElementById('addMessageBtn');
        if (addBtn) {
            addBtn.addEventListener('click', () => {
                this.addMessageSimple();
            });
        }
    }

    /**
     * –ü—Ä–æ—Å—Ç–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ prompt
     */
    addMessageSimple() {
        const messageText = prompt('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:');
        if (messageText && messageText.trim()) {
            this.addMessage(messageText.trim());
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    async loadMessages(personId) {
        try {
            console.log('Loading messages for person:', personId);
            const messagesList = document.getElementById('messagesList');
            if (!messagesList) {
                console.error('Messages list element not found');
                return;
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            messagesList.innerHTML = `
                <div class="loading">
                    <div class="spinner"></div>
                    <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...</p>
                </div>
            `;

            const url = `/api/person/${personId}/messages`;
            console.log('Fetching messages from:', url);

            const response = await fetch(url);
            console.log('Response status:', response.status);

            if (!response.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: ${response.status}`);
            }

            const rawData = await response.json();
            console.log('Raw messages data:', rawData);

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            this.messages = this.convertLegacyMessages(rawData);
            console.log('Converted messages:', this.messages);

            this.renderMessages();

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
            const messagesList = document.getElementById('messagesList');
            if (messagesList) {
                messagesList.innerHTML = `
                    <div class="error-message">
                        <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π</h3>
                        <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.</p>
                        <p class="error-details">–û—à–∏–±–∫–∞: ${error.message}</p>
                        <button onclick="window.location.reload()" class="btn">–û–±–Ω–æ–≤–∏—Ç—å</button>
                    </div>
                `;
            }
        }
    }

    /**
     * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –Ω–æ–≤—ã–π
     */
    convertLegacyMessages(rawData) {
        console.log('Converting messages:', rawData);
        const messages = [];

        rawData.forEach(item => {
            // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç (—Å –ø–æ–ª–µ–º text)
            if (item.text !== undefined) {
                messages.push({
                    text: item.text,
                    timestamp: item.timestamp || new Date().toISOString(),
                    edited: !!item.edited || !!item.editedAt
                });
            }
            // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (—Å –ø–æ–ª–µ–º type –∏ content)
            else if (item.type === 'text') {
                messages.push({
                    text: item.content,
                    timestamp: item.date || item.editedDate || new Date().toISOString(),
                    edited: !!item.editedDate
                });
            } else if (item.type === 'album') {
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–ª—å–±–æ–º—ã, –æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö
                // –∏–ª–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            }
        });

        console.log('Converted messages:', messages);
        return messages;
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    renderMessages() {
        console.log('Rendering messages, count:', this.messages.length);
        const container = document.getElementById('messagesList');
        if (!container) {
            console.error('Messages container not found');
            return;
        }

        if (this.messages.length === 0) {
            console.log('No messages to display, showing empty state');
            this.showEmptyState();
            return;
        }

        const messagesHTML = this.messages.map((message, index) =>
            this.createMessageHTML(message, index)
        ).join('');

        console.log('Generated HTML for messages:', messagesHTML.substring(0, 100) + '...');
        container.innerHTML = messagesHTML;
        this.bindMessageEvents();
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ HTML –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    createMessageHTML(message, index) {
        const date = new Date(message.timestamp || Date.now()).toLocaleString('ru-RU');
        const isEditing = this.editingMessageId === index;

        return `
            <div class="message-item" data-index="${index}">
                <div class="message-content">
                    ${isEditing ? `
                        <textarea class="edit-textarea" data-index="${index}">${this.escapeHtml(message.text)}</textarea>
                        <div class="edit-actions">
                            <button class="btn btn-sm save-edit" data-index="${index}">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                            <button class="btn btn-sm btn-secondary cancel-edit" data-index="${index}">–û—Ç–º–µ–Ω–∞</button>
                        </div>
                    ` : `
                        <p class="message-text">${this.escapeHtml(message.text)}</p>
                        <div class="message-actions">
                            <button class="btn btn-sm edit-message" data-index="${index}" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
                            <button class="btn btn-sm btn-danger delete-message" data-index="${index}" title="–£–¥–∞–ª–∏—Ç—å">üóëÔ∏è</button>
                        </div>
                    `}
                </div>
                <div class="message-meta">
                    <span class="message-date">${date}</span>
                </div>
            </div>
        `;
    }

    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º
     */
    bindMessageEvents() {
        const container = document.getElementById('messagesList');
        if (!container) return;

        // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        container.querySelectorAll('.edit-message').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const index = parseInt(e.target.dataset.index);
                this.editMessage(index);
            });
        });

        // –£–¥–∞–ª–µ–Ω–∏–µ
        container.querySelectorAll('.delete-message').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const index = parseInt(e.target.dataset.index);
                this.deleteMessage(index);
            });
        });

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        container.querySelectorAll('.save-edit').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const index = parseInt(e.target.dataset.index);
                this.saveEdit(index);
            });
        });

        // –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        container.querySelectorAll('.cancel-edit').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const index = parseInt(e.target.dataset.index);
                this.cancelEdit(index);
            });
        });
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    async addMessage(text) {
        try {
            const newMessage = {
                text: text,
                timestamp: new Date().toISOString()
            };

            this.messages.unshift(newMessage);
            await this.saveMessages();
            this.renderMessages();

            if (window.showSuccess) {
                showSuccess('–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ');
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            if (window.showError) {
                showError('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è');
            }
        }
    }

    /**
     * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    editMessage(index) {
        this.editingMessageId = index;
        this.renderMessages();
    }

    /**
     * –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    cancelEdit(index) {
        this.editingMessageId = null;
        this.renderMessages();
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    async saveEdit(index) {
        try {
            const textarea = document.querySelector(`textarea[data-index="${index}"]`);
            if (!textarea) return;

            const newText = textarea.value.trim();
            if (!newText) {
                if (window.showError) {
                    showError('–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
                }
                return;
            }

            this.messages[index].text = newText;
            this.messages[index].edited = true;
            this.messages[index].editedAt = new Date().toISOString();

            await this.saveMessages();
            this.editingMessageId = null;
            this.renderMessages();

            if (window.showSuccess) {
                showSuccess('–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            if (window.showError) {
                showError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è');
            }
        }
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    async deleteMessage(index) {
        if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ?')) {
            return;
        }

        try {
            this.messages.splice(index, 1);
            await this.saveMessages();
            this.renderMessages();

            if (window.showSuccess) {
                showSuccess('–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ');
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            if (window.showError) {
                showError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è');
            }
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä
     */
    async saveMessages() {
        try {
            const personId = getPersonIdFromUrl();
            const response = await fetch(`/api/person/${personId}/messages`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(this.messages)
            });

            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π');
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
     */
    showEmptyState() {
        const container = document.getElementById('messagesList');
        if (!container) return;

        container.innerHTML = `
            <div class="empty-state">
                <div class="empty-icon">üí¨</div>
                <h3>–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π</h3>
                <p>–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∑–∞–º–µ—Ç–∫–∏</p>
            </div>
        `;
    }

    /**
     * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
     */
    escapeHtml(unsafe) {
        return unsafe
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.PersonMessages = PersonMessages;
